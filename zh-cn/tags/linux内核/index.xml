<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux内核 on kingdix10&#39;s site</title>
    <link>https://kingdix10.github.io/zh-cn/tags/linux%E5%86%85%E6%A0%B8/</link>
    <description>Recent content in Linux内核 on kingdix10&#39;s site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>Copyright ? 2018-2024 kingdix10. All Rights Reserved.
</copyright>
    <lastBuildDate>Fri, 01 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kingdix10.github.io/zh-cn/tags/linux%E5%86%85%E6%A0%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RiscV内核初始化</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/boot/entry_riscv/</link>
      <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/boot/entry_riscv/</guid>
      <description><![CDATA[<h1 id="linux-66" data-numberify>linux-6.6<a class="anchor ms-1" href="#linux-66"></a></h1>
<p><code>arch/riscv/kernel/head.S</code>只有不到500行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">/// arch/riscv/kernel/head.S
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="nf">_start</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="err">\</span><span class="o">--</span> <span class="nf">_start_kernel</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="o">+--</span> <span class="nf">reset_regs</span><span class="p">()</span>            <span class="c1">/// if CONFIG_RISCV_M_MODE
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span>    <span class="o">+--</span> <span class="nf">setup_vm</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="o">+--</span> <span class="nf">relocate_enable_mmu</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="o">+--</span> <span class="nf">setup_trap_vector</span><span class="p">()</span>     <span class="c1">/// 设置CSR_TVEC为handle_exception
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="c1"></span>    <span class="o">+--</span> <span class="nf">kasan_early_init</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="o">+--</span> <span class="nf">soc_early_init</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="err">\</span><span class="o">--</span> <span class="nf">start_kernel</span><span class="p">()</span>
</span></span></code></pre></div>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/camera_lens_strap_145518_300x168.jpg" length="15893" type="image/.jpg" />
    </item>
    
    <item>
      <title>kmalloc和vmalloc对比</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/kmalloc_vmalloc/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/kmalloc_vmalloc/</guid>
      <description><![CDATA[<h1 id="1-kmalloc和vmalloc对比" data-numberify>1. kmalloc和vmalloc对比<a class="anchor ms-1" href="#1-kmalloc和vmalloc对比"></a></h1>
<p>以ARM64为例，不考虑高端内存。</p>

<h2 id="11-实现原理" data-numberify>1.1. 实现原理<a class="anchor ms-1" href="#11-实现原理"></a></h2>
<p><code>kmalloc</code>和<code>vmalloc</code>底层函数都是<code>__alloc_pages</code>。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/wall_brick_neon_150470_300x168.jpg" length="13857" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux中的栈</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/stack/</link>
      <pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/stack/</guid>
      <description><![CDATA[<h1 id="1-内核栈" data-numberify>1. 内核栈<a class="anchor ms-1" href="#1-内核栈"></a></h1>
<p>在每一个进程的生命周期中，必然会通过到系统调用陷入内核。在执行系统调用陷入内核之后，这些内核代码所使用的栈并不是原先进程用户空间中的栈，而是一个单独内核空间的栈，这个称作进程内核栈。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/water_waves_ripples_143522_300x168.jpg" length="11080" type="image/.jpg" />
    </item>
    
    <item>
      <title>栈帧寄存器相关的编译选项</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/fp/</link>
      <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/fp/</guid>
      <description><![CDATA[<h1 id="1-编译选项" data-numberify>1. 编译选项<a class="anchor ms-1" href="#1-编译选项"></a></h1>
<p><code>-fomit-frame-pointer</code>表示在函数调用时不需要存储堆栈帧指针。此选项可减小生成的代码镜像大小， 一般在启用<code>-On</code>优化后会自动打开，也有的平台是默认打开的。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/wall_brick_purple_141823_300x168.jpg" length="14935" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux中断子系统（二）domain注册</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/irq_domain_add/</link>
      <pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/irq_domain_add/</guid>
      <description><![CDATA[<h1 id="1-irq-domain注册" data-numberify>1. IRQ domain注册<a class="anchor ms-1" href="#1-irq-domain注册"></a></h1>
<p>中断控制器初始化的过程中，要向中断子系统注册<code>irq domain</code>。核心函数<code>__irq_domain_add</code>。</p>
<p>gic-v2使用<code>irq_domain_create_linear</code>，gic-v3则使用<code>irq_domain_add_tree</code>。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/laptop_backlight_colorful_194324_300x168.jpg" length="7666" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux中断子系统（三）设备中断注册</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/irq_create_mapping/</link>
      <pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/irq_create_mapping/</guid>
      <description><![CDATA[<h1 id="1-设备中断注册" data-numberify>1. 设备中断注册<a class="anchor ms-1" href="#1-设备中断注册"></a></h1>
<p>gic-v3的中断号划分在《IHI0069H_gic_architecture_specification.pdf》有所罗列：</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/wavy_curvy_lines_146044_300x168.jpg" length="25854" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux中断子系统（四）申请中断request_irq</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/request_irq/</link>
      <pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/request_irq/</guid>
      <description><![CDATA[<h1 id="1-申请中断" data-numberify>1. 申请中断<a class="anchor ms-1" href="#1-申请中断"></a></h1>
<p><code>__setup_irq</code>是用于设置和注册中断的核心函数，它是<code>request_threaded_irq</code>等函数的内部实现。
<picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.6/interrupt/request_irq/request_irq.png" loading="lazy" width="1157" height="443" />
</picture>

</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/pixels_cubes_shapes_127558_300x168.jpg" length="18339" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux中断子系统（五）中断处理</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/handler_entry/</link>
      <pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/handler_entry/</guid>
      <description><![CDATA[<h1 id="1-中断入口" data-numberify>1. 中断入口<a class="anchor ms-1" href="#1-中断入口"></a></h1>
<p>要处理中断，必须为<code>handle_arch_irq</code>赋值。</p>
<p>ARM64自己定义<code>handle_arch_irq</code>的实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">/// arch/arm64/kernel/irq.c
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">handle_arch_irq</span><span class="p">)(</span><span class="k">struct</span> <span class="n">pt_regs</span> <span class="o">*</span><span class="p">)</span> <span class="n">__ro_after_init</span> <span class="o">=</span> <span class="n">default_handle_irq</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">handle_arch_fiq</span><span class="p">)(</span><span class="k">struct</span> <span class="n">pt_regs</span> <span class="o">*</span><span class="p">)</span> <span class="n">__ro_after_init</span> <span class="o">=</span> <span class="n">default_handle_fiq</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kt">int</span> <span class="n">__init</span> <span class="nf">set_handle_irq</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">handle_irq</span><span class="p">)(</span><span class="k">struct</span> <span class="n">pt_regs</span> <span class="o">*</span><span class="p">))</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">handle_arch_irq</span> <span class="o">!=</span> <span class="n">default_handle_irq</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="n">EBUSY</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="n">handle_arch_irq</span> <span class="o">=</span> <span class="n">handle_irq</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="nf">pr_info</span><span class="p">(</span><span class="s">&#34;Root IRQ handler: %ps</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">handle_irq</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="kt">int</span> <span class="n">__init</span> <span class="nf">set_handle_fiq</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">handle_fiq</span><span class="p">)(</span><span class="k">struct</span> <span class="n">pt_regs</span> <span class="o">*</span><span class="p">))</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">handle_arch_fiq</span> <span class="o">!=</span> <span class="n">default_handle_fiq</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="n">EBUSY</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="n">handle_arch_fiq</span> <span class="o">=</span> <span class="n">handle_fiq</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="nf">pr_info</span><span class="p">(</span><span class="s">&#34;Root FIQ handler: %ps</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">handle_fiq</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>ARM使能<code>CONFIG_GENERIC_IRQ_MULTI_HANDLER</code>。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/travel_map_compass_123078_300x168.jpg" length="14785" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux中断子系统（一）软硬件初始化</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/init/</link>
      <pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/init/</guid>
      <description><![CDATA[<h1 id="1-简介" data-numberify>1. 简介<a class="anchor ms-1" href="#1-简介"></a></h1>
<p><code>early_irq_init</code>完成中断子系统软件部分初始化。</p>
<p><code>irqchip_init</code>初始化中断控制器，向系统注册<code>struct irq_domain</code>。</p>
<p><picture><img class="img-fluid " alt="irq_intc_init" src="/zh-cn/docs/04-kernel/linux-6.6/interrupt/init/irq_intc_init.png" loading="lazy" width="787" height="443" />
</picture>

</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/vintage_retro_camera_126517_300x168.jpg" length="11143" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux内核代码的编写和优化技巧</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/optimize_tips/</link>
      <pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/optimize_tips/</guid>
      <description><![CDATA[<h1 id="1-linux内核代码的编写和优化技巧" data-numberify>1. Linux内核代码的编写和优化技巧<a class="anchor ms-1" href="#1-linux内核代码的编写和优化技巧"></a></h1>

<h2 id="11-代码编写" data-numberify>1.1. 代码编写<a class="anchor ms-1" href="#11-代码编写"></a></h2>
<ol>
<li>使用 <code>__same_type</code>和 <code>typecheck</code>编译时检查类型匹配。</li>
<li><code>__printf</code>和 <code>__scanf</code>编译时检查代码。</li>
<li>对宏进行undef后重新定义，生成不同的代码，如 <code>__SYSCALL</code>配合 <code>unistd.h</code>生成系统调用，<code>TRACE_EVENT</code>生成ftrace相关的数据结构和各个函数。</li>
<li>使用模板宏，减少重复代码也降低出错率，如 <code>STANDARD_PARAM_DEF</code>生成 <code>module_param</code>用到的set和get函数。</li>
<li>使用内联汇编提升性能。</li>
<li>使用位图优化内存占用。</li>
<li>无锁队列kfifo。</li>
</ol>

<h2 id="12-控制编译时行为" data-numberify>1.2. 控制编译时行为<a class="anchor ms-1" href="#12-控制编译时行为"></a></h2>
<ol>
<li><code>O2</code>或 <code>O3</code>，编译时优化汇编代码。</li>
<li><code>__builtin_constant_p</code>优化常量分支。</li>
<li>使用 <code>likely</code>和 <code>unlikely</code>，编译时对代码进程重排序。</li>
<li><code>__noreturn</code>优化不需要返回的函数。</li>
<li>宏、<code>inline</code>和 <code>__always_inline</code>，内联函数，减少入栈出栈操作。</li>
<li>使用 <code>__randomize_layout</code>，结构体布局随机化，打乱成员排序，提升入侵难度。</li>
<li>使用 <code>__cacheline_aligned</code>对结构体进行cache line对齐，提升访问性能，减少cache颠簸</li>
<li>细化程序分段，如 <code>init</code>、<code>initdata</code>等，释放无用内存。</li>
<li>区分冷热段，热段如 <code>sched</code>、<code>read_mostly</code>，冷段如 <code>tracepoint</code>段，热段更容易常驻cache。</li>
<li>重要部分使用联合减少结构大小，如 <code>struct page</code>，减少内存占用。</li>
</ol>

<h2 id="13-控制运行时行为" data-numberify>1.3. 控制运行时行为<a class="anchor ms-1" href="#13-控制运行时行为"></a></h2>
<ol>
<li>使用percpu变量减少核见竞争。</li>
<li>访问一个变量时，需同时获取两把锁，将锁放到不同的cache line。如<code>struct zone</code>。</li>
<li>使用动态代码修改，如 <code>jump_label</code>、<code>alternative_if</code>，减少分支判断。</li>
<li>栈随机化和地址空间布局随机化（KASLR），提升攻击难度。</li>
<li>零拷贝技术、写时复制</li>
</ol>

<h1 id="2-linux内核中的面向对象编程" data-numberify>2. Linux内核中的面向对象编程<a class="anchor ms-1" href="#2-linux内核中的面向对象编程"></a></h1>
<ol>
<li>使用函数回调，抽象通用接口</li>
<li>抽象通用数据结构，使用container获取自定义数据结构</li>
</ol>

<h2 id="21-使用-__noreturn会有哪些编译优化" data-numberify>2.1. 使用 __noreturn会有哪些编译优化？<a class="anchor ms-1" href="#21-使用-__noreturn会有哪些编译优化"></a></h2>
<p>使用 <code>__noreturn</code>属性可以允许编译器进行一些特定的优化，因为编译器知道带这个属性的函数不会返回。这些优化可能包括：</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/laptop_dj_equipment_212416_300x168.jpg" length="9857" type="image/.jpg" />
    </item>
    
    <item>
      <title>ARM64 jump label源码分析</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/jump_label/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/jump_label/</guid>
      <description><![CDATA[<h1 id="1-背景" data-numberify>1. 背景<a class="anchor ms-1" href="#1-背景"></a></h1>
<p>引入jump label的背景，参考<a href="https://blog.csdn.net/JiMoKuangXiangQu/article/details/128239338" target="_blank" rel="noopener noreferrer">Linux: Jump label实现简析<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<blockquote>
<p>在内核代码中，有很多分支判断条件，它们在绝大多数情形下，都是不成立的。尽管我们已经加上unlikely修饰来进行优化，但是，读取 condition 仍然要访问内存，仍然需要用到cache；另外，也会CPU分支预测失败。虽然少数这样的代码影响不大，但当这样的条件判断代码（如内核中大量的tracepoint）增多的时候，将对cache会造成很大压力，所有这些代码导致的cache miss，以及CPU分支预测失败，所造成的性能损失，就变得可观起来。因此，内核需要一种方案，来解决这样的问题。这个解决方案，就是本文描述的 Jump label。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/paint_wall_shabby_135205_300x168.jpg" length="17321" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux drm mm分析(基于intel ivpu驱动)</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/drm/ivpu_drm_mm/</link>
      <pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/drm/ivpu_drm_mm/</guid>
      <description><![CDATA[使用drm mm管理虚拟内存和物理内存]]></description>
    <enclosure url="https://kingdix10.github.io/covers/metal_texture_surface_157344_300x168.jpg" length="9729" type="image/.jpg" />
    </item>
    
    <item>
      <title>【Linux内核|系统调用】深度分析系统调用从用户程序到内核的流程</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/syscall/syscall/</link>
      <pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/syscall/syscall/</guid>
      <description><![CDATA[深度分析系统调用从用户程序到内核的流程]]></description>
    <enclosure url="https://kingdix10.github.io/covers/keyboard_laptop_gradient_203739_300x168.jpg" length="10539" type="image/.jpg" />
    </item>
    
    <item>
      <title>ARM64 Linux中断入口</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/cpu_interrupt_entry/</link>
      <pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/cpu_interrupt_entry/</guid>
      <description><![CDATA[<h1 id="1-简介" data-numberify>1. 简介<a class="anchor ms-1" href="#1-简介"></a></h1>
<p>ARM64中断入口相关的代码主要在<code>arch/arm64/kernel/entry.S</code>，启动过程中，会将中断向量表<code>vectors</code>的起始虚拟地址写入到VBAR_EL1。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/shortcode.png" length="6548" type="image/.png" />
    </item>
    
    <item>
      <title>Linux fork进程/线程简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/sched/a-fork/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/sched/a-fork/</guid>
      <description><![CDATA[<h1 id="1-kernel_clone" data-numberify>1. kernel_clone<a class="anchor ms-1" href="#1-kernel_clone"></a></h1>
<p>kernel_clone是内核创建进程/线程的核心函数，如下功能都是通过调用kernel_clone实现的。</p>
<ul>
<li>kernel_thread：创建内核进程</li>
<li>user_mode_thread：创建1号进程，1号进程的回调函数先是内核态的kernel_init，之后通过execve切换到用户进程</li>
<li>fork和clone系统调用：创建用户进程/线程</li>
</ul>
<p><picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.6/sched/a-fork/kernel_clone.png" loading="lazy" width="697" height="419" />
</picture>

</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/camera_photographer_smoke_126548_300x168.jpg" length="9088" type="image/.jpg" />
    </item>
    
    <item>
      <title>ARM64 Linux内核内存大小和布局</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/memory_size_layout/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/memory_size_layout/</guid>
      <description><![CDATA[<h1 id="1-memblock" data-numberify>1. memblock<a class="anchor ms-1" href="#1-memblock"></a></h1>

<h2 id="11-结构体" data-numberify>1.1. 结构体<a class="anchor ms-1" href="#11-结构体"></a></h2>
<p><code>memblock</code>相关的全局变量是编译时静态初始化的。</p>
<p><picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.6/mm/memory_size_layout/memblock.png" loading="lazy" width="1212" height="562" />
</picture>

</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">/// mm/memblock.c
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="c1">/// INIT_MEMBLOCK_MEMORY_REGIONS和INIT_MEMBLOCK_RESERVED_REGIONS见arch/arm64/include/asm/memory.h
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span><span class="k">static</span> <span class="k">struct</span> <span class="n">memblock_region</span> <span class="n">memblock_memory_init_regions</span><span class="p">[</span><span class="n">INIT_MEMBLOCK_MEMORY_REGIONS</span><span class="p">]</span> <span class="n">__initdata_memblock</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="k">static</span> <span class="k">struct</span> <span class="n">memblock_region</span> <span class="n">memblock_reserved_init_regions</span><span class="p">[</span><span class="n">INIT_MEMBLOCK_RESERVED_REGIONS</span><span class="p">]</span> <span class="n">__initdata_memblock</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cp">#ifdef CONFIG_HAVE_MEMBLOCK_PHYS_MAP
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cp"></span><span class="k">static</span> <span class="k">struct</span> <span class="n">memblock_region</span> <span class="n">memblock_physmem_init_regions</span><span class="p">[</span><span class="n">INIT_PHYSMEM_REGIONS</span><span class="p">];</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="k">struct</span> <span class="n">memblock</span> <span class="n">memblock</span> <span class="n">__initdata_memblock</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">regions</span>		<span class="o">=</span> <span class="n">memblock_memory_init_regions</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">cnt</span>		<span class="o">=</span> <span class="mi">1</span><span class="p">,</span>	<span class="cm">/* empty dummy entry */</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">max</span>		<span class="o">=</span> <span class="n">INIT_MEMBLOCK_MEMORY_REGIONS</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">name</span>		<span class="o">=</span> <span class="s">&#34;memory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">.</span><span class="n">reserved</span><span class="p">.</span><span class="n">regions</span>	<span class="o">=</span> <span class="n">memblock_reserved_init_regions</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">.</span><span class="n">reserved</span><span class="p">.</span><span class="n">cnt</span>		<span class="o">=</span> <span class="mi">1</span><span class="p">,</span>	<span class="cm">/* empty dummy entry */</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="p">.</span><span class="n">reserved</span><span class="p">.</span><span class="n">max</span>		<span class="o">=</span> <span class="n">INIT_MEMBLOCK_RESERVED_REGIONS</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="p">.</span><span class="n">reserved</span><span class="p">.</span><span class="n">name</span>		<span class="o">=</span> <span class="s">&#34;reserved&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="p">.</span><span class="n">bottom_up</span>		<span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="p">.</span><span class="n">current_limit</span>		<span class="o">=</span> <span class="n">MEMBLOCK_ALLOC_ANYWHERE</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cp">#ifdef CONFIG_HAVE_MEMBLOCK_PHYS_MAP
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">memblock_type</span> <span class="n">physmem</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="p">.</span><span class="n">regions</span>		<span class="o">=</span> <span class="n">memblock_physmem_init_regions</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="p">.</span><span class="n">cnt</span>			<span class="o">=</span> <span class="mi">1</span><span class="p">,</span>	<span class="cm">/* empty dummy entry */</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">    <span class="p">.</span><span class="n">max</span>			<span class="o">=</span> <span class="n">INIT_PHYSMEM_REGIONS</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="p">.</span><span class="n">name</span>			<span class="o">=</span> <span class="s">&#34;physmem&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></div>
<h2 id="12-memblock操作函数" data-numberify>1.2. memblock操作函数<a class="anchor ms-1" href="#12-memblock操作函数"></a></h2>
<p>主要关注<code>struct memblock memblock</code>的<code>memory</code>和<code>reserved</code>两个成员和三个函数。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/pattern_frosty_frost_134125_300x168.jpg" length="18643" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux进程和线程关系</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/sched/relationship/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/sched/relationship/</guid>
      <description><![CDATA[<h1 id="1-基本概念" data-numberify>1. 基本概念<a class="anchor ms-1" href="#1-基本概念"></a></h1>
<p>Linux内核中没有使用单独的数据结构来描述进程和线程，而是将它们统一起来，使用task_struct结构体来描述，这就是“Linux不区分进程和线程”的来源。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/metal_plates_lattice_199631_300x168.jpg" length="24563" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux 0号线程swapper简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_0/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_0/</guid>
      <description><![CDATA[<h1 id="1-总览" data-numberify>1. 总览<a class="anchor ms-1" href="#1-总览"></a></h1>
<p><picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.1/sched/task_0/tasks.png" loading="lazy" width="3204" height="1128" />
</picture>

</p>
<p>这里以ARM64为例。</p>
<p>在内核的起始阶段，还没有进程和线程的概念，在开启MMU之后，<code>__primary_switched</code>的第一步就是将init_task的地址写到sp_el0，这个时候就可以用get_current()或者curent获取到0号线程的task_struct了。在0号线程的上下文，完成调度器的相关初始化之后，创建1号和2号线程，然后开启调度器，init_task自此进入idle状态。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/leaves_patterns_texture_127524_300x168.jpg" length="18901" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux 1号线程init简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_1/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_1/</guid>
      <description><![CDATA[<h1 id="1-1号进程的内核态" data-numberify>1. 1号进程的内核态<a class="anchor ms-1" href="#1-1号进程的内核态"></a></h1>
<p>1号进程首先运行在内核态，其函数是kernel_init，这里简单介绍一下其工作：</p>
<ol>
<li>非bootcpu相关初始化</li>
<li>页分配器初始化的收尾工作</li>
<li>驱动子系统和设备树初始化</li>
<li>调用<code>__initcall</code>指定的初始化函数</li>
<li>挂载根文件系统</li>
<li>是否<code>__init</code>指定的内存</li>
<li>执行用户态init程序</li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.1/sched/task_1/kernel_init.png" loading="lazy" width="1469" height="1859" />
</picture>

</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/trunk_tree_texture_119590_300x168.jpg" length="18828" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux 2号线程kthreadd简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_2/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_2/</guid>
      <description><![CDATA[<h1 id="1-2号线程kthreadd" data-numberify>1. 2号线程kthreadd<a class="anchor ms-1" href="#1-2号线程kthreadd"></a></h1>
<p>Linux内核规定，所有的线程必须由已存在的线程创建出来，也就是要求所有的task_struct都需要在已有的task_struct上复制出来。Linux可以通过kernel_thread来创建内核线程，这个函数会复制当前线程的task_struct。如果任由各个子系统或驱动自己调用kernel_thread来创建线程，那在创建内核线程时current所指向的task_struct是不确定的。为了解决这一问题，Linux内核将所有内核线程的创建交给固定的线程来做，这个线程就是2号线程kthreadd。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/pattern_frosty_frost_134125_300x168.jpg" length="18643" type="image/.jpg" />
    </item>
    
    <item>
      <title>ARM64 Crash调试环境搭建</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/debug/kdump_crash/arm64_setup/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/debug/kdump_crash/arm64_setup/</guid>
      <description><![CDATA[<h1 id="1-arm64-crash调试环境搭建" data-numberify>1. ARM64 Crash调试环境搭建<a class="anchor ms-1" href="#1-arm64-crash调试环境搭建"></a></h1>
<p>主要参考资料：</p>
<ul>
<li>内核源码 <code>Documentation/admin-guide/kdump/kdump.rst</code>或者<a href="https://www.kernel.org/doc/html/v6.6/admin-guide/kdump/kdump.html" target="_blank" rel="noopener noreferrer">Documentation for Kdump - The kexec-based Crash Dumping Solution<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li>Crash白皮书：<a href="https://crash-utility.github.io/crash_whitepaper.html" target="_blank" rel="noopener noreferrer">https://crash-utility.github.io/crash_whitepaper.html<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li>Crash github：<a href="https://github.com/crash-utility/crash" target="_blank" rel="noopener noreferrer">https://github.com/crash-utility/crash<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
<li>Oracle: <a href="https://docs.oracle.com/en/operating-systems/oracle-linux/6/admin/crash-debugger-use.html" target="_blank" rel="noopener noreferrer">Using the crash Debugger<i class="fas fa-external-link-square-alt ms-1"></i></a></li>
</ul>

<h2 id="11-x86_64主机编译arm64-crash工具" data-numberify>1.1. x86_64主机编译ARM64 Crash工具<a class="anchor ms-1" href="#11-x86_64主机编译arm64-crash工具"></a></h2>
<p>在x86机器上安装的Crash工具不能直接调试ARM64的coredump文件。可以通过重新编译Crash源码来生成调试ARM64 coredump文件的Crash。参考<a href="https://github.com/crash-utility/crash/tree/8.0.3" target="_blank" rel="noopener noreferrer">https://github.com/crash-utility/crash/tree/8.0.3<i class="fas fa-external-link-square-alt ms-1"></i></a>的README中提供的编译方法，解压代码后，执行 <code>make target=ARM64</code>即可。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/pixels_cubes_shapes_127558_300x168.jpg" length="18339" type="image/.jpg" />
    </item>
    
    <item>
      <title>Crash命令介绍</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/debug/kdump_crash/crash_cmd_set/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/debug/kdump_crash/crash_cmd_set/</guid>
      <description><![CDATA[<h1 id="1-crash命令介绍" data-numberify>1. Crash命令介绍<a class="anchor ms-1" href="#1-crash命令介绍"></a></h1>
<p>虽然使用硬件设备来调试有很多优点和方便之处，但是我一直希望代码是可以自己调试自己的，从而避免使用一些昂贵的外部的的设备。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/hologram_scheme_scifi_139294_300x168.jpg" length="9556" type="image/.jpg" />
    </item>
    
    <item>
      <title>保证内核启动安全的几种方式</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/kernel_boot_security/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/kernel_boot_security/</guid>
      <description><![CDATA[<h1 id="保证内核启动安全的几种方式" data-numberify>保证内核启动安全的几种方式<a class="anchor ms-1" href="#保证内核启动安全的几种方式"></a></h1>
<ol>
<li>禁止修改cmdline</li>
<li>禁止修改根文件系统</li>
<li>使能内核地址空间布局随机化(KASLR)</li>
</ol>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/code_text_colorful_140555_300x168.jpg" length="22830" type="image/.jpg" />
    </item>
    
    <item>
      <title>linux atomic接口简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/atomic/</link>
      <pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/atomic/</guid>
      <description><![CDATA[<h1 id="1-后缀说明" data-numberify>1. 后缀说明<a class="anchor ms-1" href="#1-后缀说明"></a></h1>
<p>acquire操作指的是在这条语句之后的所有内存操作只准在这条语句之后，不准被提前到这条语句之前。
release操作指的是在这条语句之前的所有内存操作只准在这条语句之前，不准被延后到这条语句之后。
relaxed操作指的是不保证任何的内存顺序。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/lines_multicolored_rainbow_125651_300x168.jpg" length="11453" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux内核驱动模型（三）驱动初始化</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/initcall/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/initcall/</guid>
      <description><![CDATA[<h1 id="1-module_init是什么" data-numberify>1. module_init是什么<a class="anchor ms-1" href="#1-module_init是什么"></a></h1>
<p>module_init是Linux内核开发和驱动开发中非常常见的宏，其定义在 <code>include/linux/module.h</code>中，可以看到，module_init的实现会根据是否定义MODULE而有所不同。MODULE决定了我们编写的驱动，是与内核编译到一起，还是单独编译为ko。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/camera_photographer_smoke_126548_300x168.jpg" length="9088" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux内核驱动模型（四）核心结构体</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/device_model/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/device_model/</guid>
      <description><![CDATA[<h1 id="1-sysfs中的busclassdevicedriver" data-numberify>1. sysfs中的bus/class/device/driver<a class="anchor ms-1" href="#1-sysfs中的busclassdevicedriver"></a></h1>
<p>首先通过实例来看bus/class/device/driver的关系。下图绘制的是qemu启动ARM64后，sysfs中platform总线下部分目录和文件的关系。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/stars_figure_pattern_178502_300x168.jpg" length="18670" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux内核驱动模型（一）设备树展开</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/fdt/fdt_dt/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/fdt/fdt_dt/</guid>
      <description><![CDATA[<h1 id="1-dt和fdt" data-numberify>1. DT和FDT<a class="anchor ms-1" href="#1-dt和fdt"></a></h1>
<p>设备树（Device Tree，DT）是一种层次结构的文本数据表示方式，用于描述硬件设备的配置信息。扁平设备树（Flattened Device Tree，FDT），也叫平坦设备树，是设备树的一种二进制表示形式，提高了在嵌入式系统中的传输和解析效率。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/blinds_lines_shade_143653_300x168.jpg" length="11444" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux ARM64页面大小和虚拟地址位数</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/arm64_pgtable/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/arm64_pgtable/</guid>
      <description><![CDATA[<p>ARM64的可配置的页面大小和虚拟地址位数是由ARM硬件决定的，不同的ARM版本，可选择的页面大小和地址位数也不一样。比如52位虚拟地址和物理地址是在ARMv8.2及之后的架构才支持的，ARMv8.2提供了两种重要的拓展：大虚拟寻址（LVA）和大物理寻址（LPA）。Linux从5.4开始支持ARM64的52位虚拟地址和物理地址。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/chip_circuit_processor_140251_300x168.jpg" length="19023" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux内核常见ARM64汇编宏</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/asm_macors/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/asm_macors/</guid>
      <description><![CDATA[ARM64汇编宏：adr_l]]></description>
    <enclosure url="https://kingdix10.github.io/covers/paint_grunge_green_124502_300x168.jpg" length="5826" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux内核驱动模型（二）设备树转换</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/fdt/dt_to_dt/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/fdt/dt_to_dt/</guid>
      <description><![CDATA[<h1 id="1-device_node-tree到device-tree" data-numberify>1. device_node tree到device tree<a class="anchor ms-1" href="#1-device_node-tree到device-tree"></a></h1>
<p>device_node的层次结构建立之后，并没有struct device生成，那我们实现的驱动probe函数又是如何获取设备的呢？
这就需要有一个从device_node创建struct device的过程，这个过程并没有一个统一的函数来实现，而是各个总线的在初始化时，主动扫描设备树，根据device_node创建自己需要的设备。下边以platform总线为例说明。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/gradient_orange_shades_131495_300x168.jpg" length="2713" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux内核数据结构kobject/kset/ktype</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/kobject/kobject/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/devicemodel/kobject/kobject/</guid>
      <description><![CDATA[<h1 id="1-数据结构简介" data-numberify>1. 数据结构简介<a class="anchor ms-1" href="#1-数据结构简介"></a></h1>
<p>内核版本：linux-6.1</p>
<p>内核文档：<a href="https://www.kernel.org/doc/html/v6.1/core-api/kobject.html" target="_blank" rel="noopener noreferrer">Everything you never wanted to know about kobjects, ksets, and ktypes — The Linux Kernel documentation<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<p>在Linux内核中，kobject、kset和kobj_type是用于管理和表示kobject的数据结构。kobject是设备驱动模型的基石，sysfs和uevent也与kobject密切相关。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/mosaic_multicolored_texture_126795_300x168.jpg" length="20064" type="image/.jpg" />
    </item>
    
    <item>
      <title>linux内核时间子系统（二）</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/time/timekeeping/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/time/timekeeping/</guid>
      <description><![CDATA[<h1 id="1-timekeeping" data-numberify>1. timekeeping<a class="anchor ms-1" href="#1-timekeeping"></a></h1>
<p>timekeeping是时间子系统用于从clocksource获取时间，维护墙上时间、单调递增时间、启动时间的模块，timekeeping提供了各种时间的获取接口。其核心数据为tk_core，实现了对timekeeper的加锁访问。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/metal_texture_surface_157344_300x168.jpg" length="9729" type="image/.jpg" />
    </item>
    
    <item>
      <title>kmalloc分配内存的大小(基于linux-5.15)</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/kmalloc_size/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/kmalloc_size/</guid>
      <description><![CDATA[<h1 id="1-kmalloc分配内存的大小" data-numberify>1. kmalloc分配内存的大小<a class="anchor ms-1" href="#1-kmalloc分配内存的大小"></a></h1>
<p>本文基于<code>linux-5.15</code>分析，linux-6.6已经删除slob，后续也会将slab移除。</p>
<p><code>kmalloc</code>会根据申请的内存大小来决定来决定使用块分配器(slab/slub/slob)或页分配器进行内存分配。
控制<code>kmalloc</code>分配行为的主要有如下三个宏。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/spots_stains_colorful_147593_300x168.jpg" length="20423" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux thermal子系统(基于5.10)</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/thermal/linux-5.10/thermal_5.10/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/thermal/linux-5.10/thermal_5.10/</guid>
      <description><![CDATA[<h1 id="1-thermal简介" data-numberify>1. thermal简介<a class="anchor ms-1" href="#1-thermal简介"></a></h1>
<p>thermal子系统主要用来监测和调节CPU、GPU等芯片或设备的温度。三个主要结构体的关系：从thermal_zone_device获取温度后，根据governor指定的策略，来控制thermal_cooling_device进行温度调节。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/metal_plates_lattice_199631_300x168.jpg" length="24563" type="image/.jpg" />
    </item>
    
    <item>
      <title>linux thermal子系统简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/thermal/thermal/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/thermal/thermal/</guid>
      <description><![CDATA[<h1 id="1-thermal简介" data-numberify>1. thermal简介<a class="anchor ms-1" href="#1-thermal简介"></a></h1>
<p>内核版本：linux-6.1</p>
<p>thermal子系统主要用来监测和调节CPU、GPU等芯片或设备的温度。三个主要结构体的关系：从thermal_zone_device获取温度后，根据governor指定的策略，来控制thermal_cooling_device进行温度调节。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/scheme_glow_blue_140190_300x168.jpg" length="21351" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux的errno简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/linux-err-return/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/linux-err-return/</guid>
      <description><![CDATA[<h1 id="1-linux的errno和指针" data-numberify>1. Linux的errno和指针<a class="anchor ms-1" href="#1-linux的errno和指针"></a></h1>
<p>常见的Linux函数返回值类型包括整型和指针，内核中这两种返回值类型的函数会互相调用。Linux的<code>errno</code>为整型，为了与<code>errno</code>对应，Linux将指针分为3种：</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/lines_intersection_oblique_153331_300x168.jpg" length="16159" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux内核sched_class汇总</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/sched/sched_class_table/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/sched/sched_class_table/</guid>
      <description><![CDATA[<h1 id="1-vmlinux中shced_class的位置" data-numberify>1. vmlinux中shced_class的位置<a class="anchor ms-1" href="#1-vmlinux中shced_class的位置"></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">/// kernel/sched/sched.h
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="cm">/*
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="cm"> * Helper to define a sched_class instance; each one is placed in a separate
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="cm"> * section which is ordered by the linker script:
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm"> *   include/asm-generic/vmlinux.lds.h
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm"> * *CAREFUL* they are laid out in *REVERSE* order!!!
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="cm"> * Also enforce alignment on the instance, not the type, to guarantee layout.
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="cp">#define DEFINE_SCHED_CLASS(name) \
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="cp">const struct sched_class name##_sched_class \
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="cp">	__aligned(__alignof__(struct sched_class)) \
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="cp">	__section(&#34;__&#34; #name &#34;_sched_class&#34;)
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="cm">/* Defined in include/asm-generic/vmlinux.lds.h */</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="k">extern</span> <span class="k">struct</span> <span class="n">sched_class</span> <span class="n">__sched_class_highest</span><span class="p">[];</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="k">extern</span> <span class="k">struct</span> <span class="n">sched_class</span> <span class="n">__sched_class_lowest</span><span class="p">[];</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="cp">#define for_class_range(class, _from, _to) \
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="cp">	for (class = (_from); class &lt; (_to); class++)
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="cp">#define for_each_class(class) \
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="cp">	for_class_range(class, __sched_class_highest, __sched_class_lowest)
</span></span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="cp">#define sched_class_above(_a, _b)	((_a) &lt; (_b))
</span></span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="k">extern</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sched_class</span> <span class="n">stop_sched_class</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="k">extern</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sched_class</span> <span class="n">dl_sched_class</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="k">extern</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sched_class</span> <span class="n">rt_sched_class</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl"><span class="k">extern</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sched_class</span> <span class="n">fair_sched_class</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl"><span class="k">extern</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sched_class</span> <span class="n">idle_sched_class</span><span class="p">;</span>
</span></span></code></pre></div><p><code>sched_class</code>定义。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/gold_background_lines_72322_300x168.jpg" length="10737" type="image/.jpg" />
    </item>
    
    <item>
      <title>linux内核时间子系统（一）</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/time/time/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/time/time/</guid>
      <description><![CDATA[<h1 id="1-简介" data-numberify>1. 简介<a class="anchor ms-1" href="#1-简介"></a></h1>
<p>内核版本：linux-6.1</p>
<p>时间子系统的作用：</p>
<ol>
<li>时间读取功能</li>
<li>定时器功能，有传统的定时器timer、高精度定时器hrtimer</li>
<li>提供用于调度的tick，有周期tick和动态tick</li>
</ol>

<h1 id="2-linux的各种时间" data-numberify>2. Linux的各种时间<a class="anchor ms-1" href="#2-linux的各种时间"></a></h1>
<p>Linux的系统时钟ID定义如下，选其中常用的简单介绍一下。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/squares_colorful_texture_133972_300x168.jpg" length="17371" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux中断处理流程图</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/irq_flow/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/interrupt/irq_flow/</guid>
      <description><![CDATA[<pre class="text-center mermaid">sequenceDiagram
    participant caller as caller
    participant irq as irq.c
    participant irqdomain as irqdomain.c
    participant irqdesc as irqdesc.c
    participant bitmap as bitmap.c

    activate caller
    caller -&gt;&gt; irq: irq_of_parse_and_map

    activate irq
        Note right of irq: irq_of_parse_and_map
        irq -&gt;&gt; irq: of_irq_parse_one
        irq -&gt;&gt; irqdomain: irq_create_of_mapping
        activate irqdomain
        Note right of irqdomain :irq_create_of_mapping
        irqdomain -&gt;&gt; irqdomain: of_phandle_args_to_fwspec
        irqdomain -&gt;&gt; irqdomain: irq_create_fwspec_mapping
        activate irqdomain
            Note right of irqdomain :irq_create_fwspec_mapping
            irqdomain -&gt;&gt; irqdomain: irq_domain_translate
            irqdomain -&gt;&gt; irqdomain: irq_find_mapping
            opt irq_find_mapping &gt; 0
                irqdomain --&gt;&gt; irq: return
                irq --&gt;&gt; caller: return
            end
            alt irq_domain_is_hierarchy
                irqdomain -&gt;&gt; irqdomain: irq_domain_alloc_irqs
                irqdomain -&gt;&gt; irqdesc: irq_domain_alloc_descs
        activate irqdesc
        Note right of irqdesc :irq_domain_alloc_descs
            else
                irqdomain -&gt;&gt; irqdomain: irq_create_mapping
                irqdomain -&gt;&gt; irqdesc: irq_domain_alloc_descs
            end
        irqdesc -&gt;&gt; irqdesc : __irq_alloc_descs
        activate irqdesc
        Note right of irqdesc: __irq_alloc_descs
        irqdesc -&gt;&gt; bitmap: bitmap_find_next_zero_area
        activate bitmap
        bitmap -&gt;&gt; bitmap: bitmap_find_next_zero_area_off
        bitmap --&gt;&gt; irqdesc: return
        deactivate bitmap
        irqdesc --&gt;&gt; irqdomain: return
        deactivate irqdomain
        deactivate irqdesc
        deactivate irqdesc

        irqdomain --&gt;&gt; irq: return
        deactivate irqdomain
        irq --&gt;&gt; caller: return
    deactivate irq
    deactivate caller</pre>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/desert_sand_wavy_141026_300x168.jpg" length="13782" type="image/.jpg" />
    </item>
    
    <item>
      <title>内存管理API汇总</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/mm_api/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/mm_api/</guid>
      <description><![CDATA[<h1 id="1-总览" data-numberify>1. 总览<a class="anchor ms-1" href="#1-总览"></a></h1>
<p>如下为内核开发或驱动开发常见的内存管理API关系，其他如CMA分配器等相关API未列出。</p>

<h2 id="11-框架图" data-numberify>1.1. 框架图<a class="anchor ms-1" href="#11-框架图"></a></h2>
<p><picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.6/mm/mm_api/mm_api_brief.png" loading="lazy" width="687" height="347" />
</picture>

</p>

<h2 id="12-函数图总览" data-numberify>1.2. 函数图总览<a class="anchor ms-1" href="#12-函数图总览"></a></h2>
<p><picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.6/mm/mm_api/slab_alloc_node.png" loading="lazy" width="2608" height="1873" />
</picture>

</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/keyboard_backlight_purple_212155_300x168.jpg" length="11894" type="image/.jpg" />
    </item>
    
    <item>
      <title>内核启动流程（一）</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/boot/entry/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/boot/entry/</guid>
      <description><![CDATA[<h1 id="1-内核启动入口" data-numberify>1. 内核启动入口<a class="anchor ms-1" href="#1-内核启动入口"></a></h1>
<p>根据Makefile对KBUILD_LDS的定义，链接vmlinux使用的连接脚本为 <code>arch/$(SRCARCH)/kernel/vmlinux.lds</code>，实际上这个脚本是在编译过程中生成的。从链接脚本 <code>arch/arm64/kernel/vmlinux.lds</code>可以查到，程序的入口为 <code>_text</code>，镜像起始位置存放的是 <code>.head.text</code>段生成的指令。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/water_waves_ripples_143522_300x168.jpg" length="11080" type="image/.jpg" />
    </item>
    
  </channel>
</rss>

