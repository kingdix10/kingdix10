<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>内存管理 on kingdix10&#39;s site</title>
    <link>https://kingdix10.github.io/zh-cn/categories/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 内存管理 on kingdix10&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright ? 2018-2024 kingdix10. All Rights Reserved.
</copyright>
    <lastBuildDate>Mon, 30 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kingdix10.github.io/zh-cn/categories/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kmalloc和vmalloc对比</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/kmalloc_vmalloc/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/kmalloc_vmalloc/</guid>
      <description><![CDATA[1. kmalloc和vmalloc对比 以ARM64为例，不考虑高端内存。 1.1. 实现原理 kmalloc和vmalloc底层函数都是__alloc_p]]></description>
    <enclosure url="https://kingdix10.github.io/covers/drone_camera_technology_171576_300x168.jpg" length="10102" type="image/.jpg" />
    </item>
    
    <item>
      <title>vmalloc原理</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/vmalloc/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/vmalloc/</guid>
      <description><![CDATA[1. 全局数据结构 1/// mm/vmalloc.c 2/* Export for kexec only */ 3LIST_HEAD(vmap_area_list); 4static struct rb_root vmap_area_root = RB_ROOT; 5/// ... ... 6 7/* 8 * This kmem_cache is used for vmap_area objects. Instead of 9 * allocating from slab we reuse an object from this cache to 10 * make things faster. Especially in &#34;no edge&#34; splitting of 11 * free block. 12 */ 13static struct]]></description>
    <enclosure url="https://kingdix10.github.io/covers/metal_texture_surface_157344_300x168.jpg" length="9729" type="image/.jpg" />
    </item>
    
    <item>
      <title>ARM64 Linux内核内存大小和布局</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/memory_size_layout/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/memory_size_layout/</guid>
      <description><![CDATA[1. memblock 1.1. 结构体 memblock相关的全局变量是编译时静态初始化的。 1/// mm/memblock.c 2 3/// INIT_MEMBLOCK_MEMORY_REGIONS和INIT_]]></description>
    <enclosure url="https://kingdix10.github.io/covers/wood_texture_logs_159793_300x168.jpg" length="19513" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux ARM64页面大小和虚拟地址位数</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/arm64_pgtable/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/arm64_pgtable/</guid>
      <description><![CDATA[ARM64的可配置的页面大小和虚拟地址位数是由ARM硬件决定的，不同的ARM版本，可选择的页面大小和地址位数也不一样。比如52位虚拟地址和物]]></description>
    <enclosure url="https://kingdix10.github.io/covers/squares_colorful_texture_133972_300x168.jpg" length="17371" type="image/.jpg" />
    </item>
    
    <item>
      <title>kmalloc分配内存的大小(基于linux-5.15)</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/kmalloc_size/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/kmalloc_size/</guid>
      <description><![CDATA[1. kmalloc分配内存的大小 本文基于linux-5.15分析，linux-6.6已经删除slob，后续也会将slab移除。 kmalloc会]]></description>
    <enclosure url="https://kingdix10.github.io/covers/laptop_keyboard_glow_170138_300x168.jpg" length="3604" type="image/.jpg" />
    </item>
    
    <item>
      <title>内存管理API汇总</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/mm_api/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/mm_api/</guid>
      <description><![CDATA[1. 总览 如下为内核开发或驱动开发常见的内存管理API关系，其他如CMA分配器等相关API未列出。 1.1. 框架图 1.2. 函数图总览 2. memblock分配器 m]]></description>
    <enclosure url="https://kingdix10.github.io/covers/squares_structure_glow_140857_300x168.jpg" length="22907" type="image/.jpg" />
    </item>
    
    <item>
      <title>为什么要有idmap</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/why_idmap/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/mm/why_idmap/</guid>
      <description><![CDATA[要开启MMU，需要建立页表映射，而且需要处理缓存一致性的问题，这样内核启动的依赖条件就会变得复杂。为了降低启动代码的复杂度，约定在Linux]]></description>
    <enclosure url="https://kingdix10.github.io/covers/backlight_neon_electronics_144683_300x168.jpg" length="9613" type="image/.jpg" />
    </item>
    
  </channel>
</rss>

