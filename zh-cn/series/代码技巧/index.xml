<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>代码技巧 on kingdix10&#39;s site</title>
    <link>https://kingdix10.github.io/zh-cn/series/%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/</link>
    <description>Recent content in 代码技巧 on kingdix10&#39;s site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>Copyright ? 2018-2024 kingdix10. All Rights Reserved.
</copyright>
    <lastBuildDate>Sun, 09 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kingdix10.github.io/zh-cn/series/%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux内核代码的编写和优化技巧</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/optimize_tips/</link>
      <pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/optimize_tips/</guid>
      <description><![CDATA[<h1 id="1-linux内核代码的编写和优化技巧" data-numberify>1. Linux内核代码的编写和优化技巧<a class="anchor ms-1" href="#1-linux内核代码的编写和优化技巧"></a></h1>

<h2 id="11-代码编写" data-numberify>1.1. 代码编写<a class="anchor ms-1" href="#11-代码编写"></a></h2>
<ol>
<li>使用 <code>__same_type</code>和 <code>typecheck</code>编译时检查类型匹配。</li>
<li><code>__printf</code>和 <code>__scanf</code>编译时检查代码。</li>
<li>对宏进行undef后重新定义，生成不同的代码，如 <code>__SYSCALL</code>配合 <code>unistd.h</code>生成系统调用，<code>TRACE_EVENT</code>生成ftrace相关的数据结构和各个函数。</li>
<li>使用模板宏，减少重复代码也降低出错率，如 <code>STANDARD_PARAM_DEF</code>生成 <code>module_param</code>用到的set和get函数。</li>
<li>使用内联汇编提升性能。</li>
<li>使用位图优化内存占用。</li>
<li>无锁队列kfifo。</li>
</ol>

<h2 id="12-控制编译时行为" data-numberify>1.2. 控制编译时行为<a class="anchor ms-1" href="#12-控制编译时行为"></a></h2>
<ol>
<li><code>O2</code>或 <code>O3</code>，编译时优化汇编代码。</li>
<li><code>__builtin_constant_p</code>优化常量分支。</li>
<li>使用 <code>likely</code>和 <code>unlikely</code>，编译时对代码进程重排序。</li>
<li><code>__noreturn</code>优化不需要返回的函数。</li>
<li>宏、<code>inline</code>和 <code>__always_inline</code>，内联函数，减少入栈出栈操作。</li>
<li>使用 <code>__randomize_layout</code>，结构体布局随机化，打乱成员排序，提升入侵难度。</li>
<li>使用 <code>__cacheline_aligned</code>对结构体进行cache line对齐，提升访问性能，减少cache颠簸</li>
<li>细化程序分段，如 <code>init</code>、<code>initdata</code>等，释放无用内存。</li>
<li>区分冷热段，热段如 <code>sched</code>、<code>read_mostly</code>，冷段如 <code>tracepoint</code>段，热段更容易常驻cache。</li>
<li>重要部分使用联合减少结构大小，如 <code>struct page</code>，减少内存占用。</li>
</ol>

<h2 id="13-控制运行时行为" data-numberify>1.3. 控制运行时行为<a class="anchor ms-1" href="#13-控制运行时行为"></a></h2>
<ol>
<li>使用percpu变量减少核见竞争。</li>
<li>访问一个变量时，需同时获取两把锁，将锁放到不同的cache line。如<code>struct zone</code>。</li>
<li>使用动态代码修改，如 <code>jump_label</code>、<code>alternative_if</code>，减少分支判断。</li>
<li>栈随机化和地址空间布局随机化（KASLR），提升攻击难度。</li>
<li>零拷贝技术、写时复制</li>
</ol>

<h1 id="2-linux内核中的面向对象编程" data-numberify>2. Linux内核中的面向对象编程<a class="anchor ms-1" href="#2-linux内核中的面向对象编程"></a></h1>
<ol>
<li>使用函数回调，抽象通用接口</li>
<li>抽象通用数据结构，使用container获取自定义数据结构</li>
</ol>

<h2 id="21-使用-__noreturn会有哪些编译优化" data-numberify>2.1. 使用 __noreturn会有哪些编译优化？<a class="anchor ms-1" href="#21-使用-__noreturn会有哪些编译优化"></a></h2>
<p>使用 <code>__noreturn</code>属性可以允许编译器进行一些特定的优化，因为编译器知道带这个属性的函数不会返回。这些优化可能包括：</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/laptop_dj_equipment_212416_300x168.jpg" length="9857" type="image/.jpg" />
    </item>
    
    <item>
      <title>ARM64 jump label源码分析</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/jump_label/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.6/misc/jump_label/</guid>
      <description><![CDATA[<h1 id="1-背景" data-numberify>1. 背景<a class="anchor ms-1" href="#1-背景"></a></h1>
<p>引入jump label的背景，参考<a href="https://blog.csdn.net/JiMoKuangXiangQu/article/details/128239338" target="_blank" rel="noopener noreferrer">Linux: Jump label实现简析<i class="fas fa-external-link-square-alt ms-1"></i></a></p>
<blockquote>
<p>在内核代码中，有很多分支判断条件，它们在绝大多数情形下，都是不成立的。尽管我们已经加上unlikely修饰来进行优化，但是，读取 condition 仍然要访问内存，仍然需要用到cache；另外，也会CPU分支预测失败。虽然少数这样的代码影响不大，但当这样的条件判断代码（如内核中大量的tracepoint）增多的时候，将对cache会造成很大压力，所有这些代码导致的cache miss，以及CPU分支预测失败，所造成的性能损失，就变得可观起来。因此，内核需要一种方案，来解决这样的问题。这个解决方案，就是本文描述的 Jump label。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/paint_wall_shabby_135205_300x168.jpg" length="17321" type="image/.jpg" />
    </item>
    
  </channel>
</rss>

