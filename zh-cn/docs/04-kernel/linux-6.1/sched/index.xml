<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>进程管理 on kingdix10&#39;s site</title>
    <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/</link>
    <description>Recent content in 进程管理 on kingdix10&#39;s site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>Copyright ? 2018-2024 kingdix10. All Rights Reserved.
</copyright>
    <lastBuildDate>Wed, 13 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 0号线程swapper简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_0/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_0/</guid>
      <description><![CDATA[<h1 id="1-总览" data-numberify>1. 总览<a class="anchor ms-1" href="#1-总览"></a></h1>
<p><picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.1/sched/task_0/tasks.png" loading="lazy" width="3204" height="1128" />
</picture>

</p>
<p>这里以ARM64为例。</p>
<p>在内核的起始阶段，还没有进程和线程的概念，在开启MMU之后，<code>__primary_switched</code>的第一步就是将init_task的地址写到sp_el0，这个时候就可以用get_current()或者curent获取到0号线程的task_struct了。在0号线程的上下文，完成调度器的相关初始化之后，创建1号和2号线程，然后开启调度器，init_task自此进入idle状态。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/leaves_patterns_texture_127524_300x168.jpg" length="18901" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux 1号线程init简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_1/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_1/</guid>
      <description><![CDATA[<h1 id="1-1号进程的内核态" data-numberify>1. 1号进程的内核态<a class="anchor ms-1" href="#1-1号进程的内核态"></a></h1>
<p>1号进程首先运行在内核态，其函数是kernel_init，这里简单介绍一下其工作：</p>
<ol>
<li>非bootcpu相关初始化</li>
<li>页分配器初始化的收尾工作</li>
<li>驱动子系统和设备树初始化</li>
<li>调用<code>__initcall</code>指定的初始化函数</li>
<li>挂载根文件系统</li>
<li>是否<code>__init</code>指定的内存</li>
<li>执行用户态init程序</li>
</ol>
<p><picture><img class="img-fluid " alt="" src="/zh-cn/docs/04-kernel/linux-6.1/sched/task_1/kernel_init.png" loading="lazy" width="1469" height="1859" />
</picture>

</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/trunk_tree_texture_119590_300x168.jpg" length="18828" type="image/.jpg" />
    </item>
    
    <item>
      <title>Linux 2号线程kthreadd简介</title>
      <link>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_2/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kingdix10.github.io/zh-cn/docs/04-kernel/linux-6.1/sched/task_2/</guid>
      <description><![CDATA[<h1 id="1-2号线程kthreadd" data-numberify>1. 2号线程kthreadd<a class="anchor ms-1" href="#1-2号线程kthreadd"></a></h1>
<p>Linux内核规定，所有的线程必须由已存在的线程创建出来，也就是要求所有的task_struct都需要在已有的task_struct上复制出来。Linux可以通过kernel_thread来创建内核线程，这个函数会复制当前线程的task_struct。如果任由各个子系统或驱动自己调用kernel_thread来创建线程，那在创建内核线程时current所指向的task_struct是不确定的。为了解决这一问题，Linux内核将所有内核线程的创建交给固定的线程来做，这个线程就是2号线程kthreadd。</p>]]></description>
    <enclosure url="https://kingdix10.github.io/covers/pattern_frosty_frost_134125_300x168.jpg" length="18643" type="image/.jpg" />
    </item>
    
  </channel>
</rss>

